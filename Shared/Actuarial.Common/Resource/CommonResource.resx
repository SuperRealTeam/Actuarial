<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedSuccessfully" xml:space="preserve">
    <value>Record added successfully</value>
  </data>
  <data name="Appointmentalreadyexist" xml:space="preserve">
    <value>Appointment already exist</value>
  </data>
  <data name="CouldNotStartWithSpace" xml:space="preserve">
    <value>Could not start with space.</value>
  </data>
  <data name="DeleteSuccessfully" xml:space="preserve">
    <value>Record deleted successfully</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="EmailIdAlreadyExist" xml:space="preserve">
    <value>Email Id Already Exist</value>
  </data>
  <data name="EnterBetweeen10to15" xml:space="preserve">
    <value>Please enter 10 to 15 digits alpha-numeric value</value>
  </data>
  <data name="EnterOnly8" xml:space="preserve">
    <value>Please enter 8 digits numeric value</value>
  </data>
  <data name="FormattedRequired" xml:space="preserve">
    <value>{0} is required.</value>
  </data>
  <data name="InternalServerError" xml:space="preserve">
    <value>Internal Server Error Occured.</value>
  </data>
  <data name="InvalidDetails" xml:space="preserve">
    <value>Invalid Details</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>Invalid Email</value>
  </data>
  <data name="InvalidEmailRegularExp" xml:space="preserve">
    <value />
  </data>
  <data name="InvalidModel" xml:space="preserve">
    <value>Model is not valid</value>
  </data>
  <data name="InvalidNumber" xml:space="preserve">
    <value>Invalid number.</value>
  </data>
  <data name="InvalidNumberForAurstralia" xml:space="preserve">
    <value>Number should starts from 04 and of 10 digits.</value>
  </data>
  <data name="InvalidPhoneNumber" xml:space="preserve">
    <value>Invalid phone number</value>
  </data>
  <data name="InvalidValue" xml:space="preserve">
    <value>Invalid value</value>
  </data>
  <data name="InvalidYearOfExperienceNumber" xml:space="preserve">
    <value>Please enter experiance less than 90 years.</value>
  </data>
  <data name="List" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="MaximumLengthExceeded" xml:space="preserve">
    <value>Maximum Length Exceeded</value>
  </data>
  <data name="MaximumLengthExceeded1000" xml:space="preserve">
    <value>Maximum 1000 character allowed.</value>
  </data>
  <data name="MaximumLengthExceeded10000" xml:space="preserve">
    <value>Maximum 10000 character allowed.</value>
  </data>
  <data name="MaximumLengthExceeded50" xml:space="preserve">
    <value>Maximum 50 character allowed.</value>
  </data>
  <data name="MaximumLengthExceeded500" xml:space="preserve">
    <value>Maximum 500 character allowed.</value>
  </data>
  <data name="MaxLength100" xml:space="preserve">
    <value>Max Length 100 Allowed.</value>
  </data>
  <data name="NoRecordFound" xml:space="preserve">
    <value>No record found.</value>
  </data>
  <data name="NoRecordFoundUser" xml:space="preserve">
    <value>No record found for this user.</value>
  </data>
  <data name="NoSpaceAllowed" xml:space="preserve">
    <value>No space allowed.</value>
  </data>
  <data name="NoSpecialCharactersAllowed" xml:space="preserve">
    <value>No special characters allowed as input.</value>
  </data>
  <data name="OnlyContainsValueAllowed" xml:space="preserve">
    <value>0-9 a-z A-Z ''-'.,() values allowed.</value>
  </data>
  <data name="OnlyIntegers" xml:space="preserve">
    <value>1-99</value>
  </data>
  <data name="PasswordLength" xml:space="preserve">
    <value>Incorrect Username or Password</value>
  </data>
  <data name="PasswordMatch" xml:space="preserve">
    <value>Password and Confirm Password does not match</value>
  </data>
  <data name="PasswordUpdatedSuccessfully" xml:space="preserve">
    <value>Password updated successfully. Please login with new password.</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="StatusChangedSuccessfully" xml:space="preserve">
    <value>Status changed successfully</value>
  </data>
  <data name="UpdateSuccessfully" xml:space="preserve">
    <value>Record updated successfully</value>
  </data>
  <data name="UserDetails" xml:space="preserve">
    <value>User Details.</value>
  </data>
  <data name="ValueNotStartWithSpace" xml:space="preserve">
    <value>Field value should not start with space.</value>
  </data>
  <data name="WrongOldPassword" xml:space="preserve">
    <value>Wrong current password.</value>
  </data>
</root>